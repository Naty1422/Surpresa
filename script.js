// script.js
document.addEventListener('DOMContentLoaded', () => {
    // --- L√ìGICA DA P√ÅGINA DE BOAS-VINDAS ---
    const welcomeScreen = document.getElementById('welcome-screen');
    const mainContent = document.getElementById('main-content');
    const enterButton = document.getElementById('enterButton');

    // Garante que a tela de boas-vindas esteja vis√≠vel ao carregar.
    if (welcomeScreen) {
        welcomeScreen.classList.add('active'); // Garante que come√ßa vis√≠vel
    }

    if (enterButton) {
        enterButton.addEventListener('click', () => {
            if (welcomeScreen) {
                welcomeScreen.classList.remove('active');
                welcomeScreen.classList.add('hidden'); // Inicia a transi√ß√£o para sumir
            }

            // Ap√≥s a transi√ß√£o da tela de boas-vindas, mostra o conte√∫do principal
            setTimeout(() => {
                if (mainContent) {
                    mainContent.classList.add('active'); // Mostra a p√°gina principal
                    window.scrollTo({ top: 0, behavior: 'smooth' }); // Rola para o topo
                }
                // CHAMA A FUN√á√ÉO QUE INICIALIZA TUDO NA P√ÅGINA PRINCIPAL
                initializeMainPageFunctions();
            }, 1000); // Este tempo deve corresponder √† dura√ß√£o da transi√ß√£o CSS de 'welcome-screen'
        });
    }

    // --- VARI√ÅVEIS GLOBAIS OU ACESS√çVEIS EM TODAS AS FUN√á√ïES AUXILIARES ---
    // √â importante que essas vari√°veis sejam declaradas fora de qualquer fun√ß√£o
    // para que possam ser acessadas por `initializeMainPageFunctions` E pelas fun√ß√µes auxiliares.
    const backgroundMusic = document.getElementById('background-music');
    const musicToggleButton = document.getElementById('music-toggle');
    const toggleBtn = document.getElementById("toggle-mode");

    // Vari√°veis do carrossel (declaradas aqui para serem acess√≠veis pelas fun√ß√µes auxiliares)
    const carouselSlide = document.querySelector('#momentos-inesqueciveis-carrossel .carousel-slide');
    const carouselImages = document.querySelectorAll('#momentos-inesqueciveis-carrossel .carousel-slide img');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const carouselContainer = document.querySelector('.carousel-container');

    let counter = 0; // Estado atual do slide do carrossel
    let autoSlideInterval; // Para controlar o setInterval do carrossel

    // Data inicial do relacionamento para o rel√≥gio.
    const startDate = new Date('2024-08-27T00:00:00');

    // --- FUN√á√ÉO PARA INICIALIZAR AS FUN√á√ïES DA P√ÅGINA PRINCIPAL ---
    // Esta fun√ß√£o ser√° chamada SOMENTE depois que o bot√£o 'Entrar' for clicado.
    function initializeMainPageFunctions() {
        // --- Modo Noturno Rom√¢ntico ---
        if (toggleBtn) {
            toggleBtn.addEventListener("click", () => {
                document.body.classList.toggle("modo-romantico");
                if (document.body.classList.contains("modo-romantico")) {
                    toggleBtn.textContent = "‚òÄÔ∏è";
                    toggleBtn.title = "Voltar ao modo claro";
                } else {
                    toggleBtn.textContent = "üåô";
                    toggleBtn.title = "Ativar modo noturno rom√¢ntico";
                }
            });
        }

        // --- L√≥gica do Rel√≥gio ---
        updateClock(); // Chama a primeira atualiza√ß√£o imediatamente
        setInterval(updateClock, 1000); // Inicia a atualiza√ß√£o a cada segundo

        // --- L√≥gica do Carrossel de Fotos ---
        if (carouselSlide && carouselContainer && carouselImages.length > 0) {
            setCarouselWidthAndPosition(); // Define a largura inicial
            startAutoSlide(); // Inicia a troca autom√°tica
        }
        if (prevBtn && nextBtn) {
            prevBtn.addEventListener('click', () => {
                clearInterval(autoSlideInterval); // Para o auto-slide
                prevSlide();
                startAutoSlide(); // Reinicia o auto-slide
            });
            nextBtn.addEventListener('click', () => {
                clearInterval(autoSlideInterval); // Para o auto-slide
                nextSlide();
                startAutoSlide(); // Reinicia o auto-slide
            });
        }
        window.addEventListener('resize', () => {
            if (carouselSlide) {
                setCarouselWidthAndPosition();
            }
        });

        // --- Efeito de digita√ß√£o animada ---
        const typingTitles = document.querySelectorAll('.typing-title');
        typingTitles.forEach((el, index) => {
            const fullText = el.textContent;
            el.textContent = '';
            el.style.width = '0'; // Garante que come√ßa invis√≠vel, para a anima√ß√£o

            setTimeout(() => {
                let i = 0;
                const interval = setInterval(() => {
                    el.textContent = fullText.slice(0, i + 1);
                    el.style.width = 'auto'; // Permite que a largura se ajuste
                    i++;
                    if (i === fullText.length) {
                        clearInterval(interval);
                        el.style.borderRight = 'none'; // Remove o "cursor"
                    }
                }, 50); // Velocidade da digita√ß√£o
            }, index * 500); // Atraso para cada t√≠tulo come√ßar a digitar
        });

        // --- Mensagem Rom√¢ntica Flutuante ---
        setTimeout(mostrarMensagemRomantica, 3000); // Atraso inicial para a primeira mensagem
        setInterval(mostrarMensagemRomantica, 15000); // Exibe uma nova mensagem a cada 15 segundos

        // --- L√ìGICA DO PLAYER DE M√öSICA ---
        if (backgroundMusic) {
            backgroundMusic.muted = false; // Desmuta a m√∫sica
            const playPromise = backgroundMusic.play(); // Tenta reproduzir

            if (playPromise !== undefined) {
                playPromise.then(_ => {
                    // Reprodu√ß√£o iniciada com sucesso
                    if (musicToggleButton) {
                        musicToggleButton.classList.add('active-btn'); // Mostra o bot√£o de controle
                        musicToggleButton.querySelector('i').classList.remove('fa-volume-mute', 'fa-play');
                        musicToggleButton.querySelector('i').classList.add('fa-volume-up');
                    }
                })
                .catch(error => {
                    // A reprodu√ß√£o foi bloqueada (ex: auto-play sem intera√ß√£o)
                    console.warn("A reprodu√ß√£o autom√°tica foi impedida ou negada pelo navegador:", error);
                    if (musicToggleButton) {
                        musicToggleButton.classList.add('active-btn'); // Ainda mostra o bot√£o
                        musicToggleButton.innerHTML = '<i class="fas fa-play"></i>'; // Altera o √≠cone para "Play"
                        backgroundMusic.muted = true; // Mant√©m mutado se n√£o p√¥de tocar
                    }
                });
            }
        }

        // --- Listener para o Bot√£o de Controle de M√∫sica (Play/Pause) ---
        if (musicToggleButton) {
            musicToggleButton.addEventListener('click', () => {
                if (backgroundMusic.paused) {
                    backgroundMusic.play();
                    musicToggleButton.querySelector('i').classList.remove('fa-volume-mute', 'fa-play');
                    musicToggleButton.querySelector('i').classList.add('fa-volume-up');
                } else {
                    backgroundMusic.pause();
                    musicToggleButton.querySelector('i').classList.remove('fa-volume-up');
                    musicToggleButton.querySelector('i').classList.add('fa-volume-mute');
                }
            });
        }
    } // FIM DA initializeMainPageFunctions()


    // --- FUN√á√ïES AUXILIARES (DEFINIDAS NO ESCOPO GLOBAL PARA SEREM ACESS√çVEIS) ---

    function formatNumber(num) {
        return num < 10 ? '0' + num : num;
    }

    function updateClock() {
        // 'startDate' √© acess√≠vel aqui por ser global
        const now = new Date();
        const difference = now.getTime() - startDate.getTime();

        const timerEl = document.getElementById('countdown-timer');
        const daysEl = document.getElementById('days');
        const hoursEl = document.getElementById('hours');
        const minutesEl = document.getElementById('minutes');
        const secondsEl = document.getElementById('seconds');

        if (difference < 0) {
            if (timerEl) {
                timerEl.innerHTML = 'Aguardando o in√≠cio do nosso amor...';
            }
            return;
        }

        const seconds = Math.floor(difference / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        const displaySeconds = seconds % 60;
        const displayMinutes = minutes % 60;
        const displayHours = hours % 24;

        if (daysEl) daysEl.textContent = formatNumber(days);
        if (hoursEl) hoursEl.textContent = formatNumber(displayHours);
        if (minutesEl) minutesEl.textContent = formatNumber(displayMinutes);
        if (secondsEl) secondsEl.textContent = formatNumber(displaySeconds);
    }

    function setCarouselWidthAndPosition() {
        // As vari√°veis do carrossel s√£o acess√≠veis aqui por serem globais
        if (!carouselSlide || !carouselContainer || carouselImages.length === 0) {
            console.warn("Elementos do carrossel n√£o encontrados ou sem imagens.");
            return;
        }

        const totalImages = carouselImages.length;
        // Recalcular a largura para garantir que esteja sempre correta, mesmo ap√≥s redimensionamento
        let currentSlideWidth = carouselContainer.clientWidth;

        if (currentSlideWidth === 0 && carouselImages[0]) {
            currentSlideWidth = carouselImages[0].offsetWidth;
        }

        if (currentSlideWidth === 0) {
            console.error("N√£o foi poss√≠vel determinar a largura do slide. Carrossel pode n√£o funcionar corretamente.");
            return;
        }

        carouselSlide.style.width = (currentSlideWidth * totalImages) + 'px';
        carouselSlide.style.transform = `translateX(${-currentSlideWidth * counter}px)`;
    }

    function nextSlide() {
        // As vari√°veis do carrossel s√£o acess√≠veis aqui por serem globais
        if (!carouselSlide || !carouselImages.length || !carouselContainer) return;

        const totalImages = carouselImages.length;
        const currentSlideWidth = carouselContainer.clientWidth;

        counter = (counter + 1) % totalImages;
        carouselSlide.style.transition = "transform 0.5s ease-in-out";
        carouselSlide.style.transform = `translateX(${-currentSlideWidth * counter}px)`;
    }

    function prevSlide() {
        // As vari√°veis do carrossel s√£o acess√≠veis aqui por serem globais
        if (!carouselSlide || !carouselImages.length || !carouselContainer) return;

        const totalImages = carouselImages.length;
        const currentSlideWidth = carouselContainer.clientWidth;

        counter = (counter - 1 + totalImages) % totalImages;
        carouselSlide.style.transition = "transform 0.5s ease-in-out";
        carouselSlide.style.transform = `translateX(${-currentSlideWidth * counter}px)`;
    }

    function startAutoSlide() {
        // 'autoSlideInterval' √© acess√≠vel aqui por ser global
        if (!carouselSlide) return;

        clearInterval(autoSlideInterval); // Limpa qualquer intervalo anterior
        autoSlideInterval = setInterval(nextSlide, 10000); // 10 segundos
    }

    // Mensagens Rom√¢nticas
    const mensagens = [
        "Voc√™ √© meu sonho real üíñ",
        "Te amo mais a cada segundo ‚è≥",
        "Nosso amor s√≥ cresce üå±",
        "Obrigada por existir üí´",
        "Estar com voc√™ √© meu lugar favorito üè°",
        "Seu sorriso √© meu sol ‚òÄÔ∏è",
        "Seu colo √© meu lugar favorito no mundo üåè"
    ];

    function mostrarMensagemRomantica() {
        const container = document.getElementById("mensagem-romantica");
        if (!container) return;

        container.classList.remove("visivel");

        setTimeout(() => {
            const mensagem = mensagens[Math.floor(Math.random() * mensagens.length)];
            container.textContent = mensagem;
            container.classList.add("visivel");
        }, 500);
    }

}); // Fim do DOMContentLoaded